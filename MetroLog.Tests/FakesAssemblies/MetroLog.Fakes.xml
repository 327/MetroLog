<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MetroLog.Fakes</name>
    </assembly>
    <members>
        <member name="T:MetroLog.Fakes.ShimLogEventInfo">
            <summary>Shim type of MetroLog.LogEventInfo</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogEventInfo.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogEventInfo.#ctor(MetroLog.LogEventInfo)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogEventInfo.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogEventInfo.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.ConstructorLogLevelStringStringException">
            <summary>Sets the shim of LogEventInfo.LogEventInfo(LogLevel level, String logger, String message, Exception ex)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.ExceptionGet">
            <summary>Sets the shim of LogEventInfo.get_Exception()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.ExceptionSetException">
            <summary>Sets the shim of LogEventInfo.set_Exception(Exception value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.LevelGet">
            <summary>Sets the shim of LogEventInfo.get_Level()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.LevelSetLogLevel">
            <summary>Sets the shim of LogEventInfo.set_Level(LogLevel value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.LoggerGet">
            <summary>Sets the shim of LogEventInfo.get_Logger()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.LoggerSetString">
            <summary>Sets the shim of LogEventInfo.set_Logger(String value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.MessageGet">
            <summary>Sets the shim of LogEventInfo.get_Message()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.MessageSetString">
            <summary>Sets the shim of LogEventInfo.set_Message(String value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.SequenceIDGet">
            <summary>Sets the shim of LogEventInfo.get_SequenceID()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.SequenceIDSetInt64">
            <summary>Sets the shim of LogEventInfo.set_SequenceID(Int64 value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.TimeStampGet">
            <summary>Sets the shim of LogEventInfo.get_TimeStamp()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.TimeStampSetDateTimeOffset">
            <summary>Sets the shim of LogEventInfo.set_TimeStamp(DateTimeOffset value)</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLogEventInfo.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.ExceptionGet">
            <summary>Sets the shim of LogEventInfo.get_Exception()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.ExceptionSetException">
            <summary>Sets the shim of LogEventInfo.set_Exception(Exception value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.LevelGet">
            <summary>Sets the shim of LogEventInfo.get_Level()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.LevelSetLogLevel">
            <summary>Sets the shim of LogEventInfo.set_Level(LogLevel value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.LoggerGet">
            <summary>Sets the shim of LogEventInfo.get_Logger()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.LoggerSetString">
            <summary>Sets the shim of LogEventInfo.set_Logger(String value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.MessageGet">
            <summary>Sets the shim of LogEventInfo.get_Message()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.MessageSetString">
            <summary>Sets the shim of LogEventInfo.set_Message(String value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.SequenceIDGet">
            <summary>Sets the shim of LogEventInfo.get_SequenceID()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.SequenceIDSetInt64">
            <summary>Sets the shim of LogEventInfo.set_SequenceID(Int64 value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.TimeStampGet">
            <summary>Sets the shim of LogEventInfo.get_TimeStamp()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogEventInfo.AllInstances.TimeStampSetDateTimeOffset">
            <summary>Sets the shim of LogEventInfo.set_TimeStamp(DateTimeOffset value)</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLogManagerFactoryBase">
            <summary>Shim type of MetroLog.LogManagerFactoryBase</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogManagerFactoryBase.#ctor(MetroLog.LogManagerFactoryBase)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogManagerFactoryBase.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogManagerFactoryBase.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.Constructor">
            <summary>Sets the shim of LogManagerFactoryBase.LogManagerFactoryBase()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.CreateDefaultSettings">
            <summary>Sets the shim of LogManagerFactoryBase.CreateDefaultSettings()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.CreateNewLoggingConfiguration">
            <summary>Sets the shim of LogManagerFactoryBase.CreateNew(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.DefaultLogManagerGet">
            <summary>Sets the shim of LogManagerFactoryBase.get_DefaultLogManager()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.DefaultLogManagerSetILogManager">
            <summary>Sets the shim of LogManagerFactoryBase.set_DefaultLogManager(ILogManager value)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.DefaultSettingsGet">
            <summary>Sets the shim of LogManagerFactoryBase.get_DefaultSettings()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.SetDefaultLogManagerILogManager">
            <summary>Sets the shim of LogManagerFactoryBase.SetDefaultLogManager(ILogManager instance)</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLogManagerFactoryBase.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.AllInstances.CreateDefaultSettings">
            <summary>Sets the shim of LogManagerFactoryBase.CreateDefaultSettings()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.AllInstances.CreateNewLoggingConfiguration">
            <summary>Sets the shim of LogManagerFactoryBase.CreateNew(LoggingConfiguration configuration)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogManagerFactoryBase.AllInstances.DefaultSettingsGet">
            <summary>Sets the shim of LogManagerFactoryBase.get_DefaultSettings()</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLogWriteOperation">
            <summary>Shim type of MetroLog.LogWriteOperation</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogWriteOperation.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogWriteOperation.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLogWriteOperation.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLogWriteOperation.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLogWriteOperation.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLoggingConfiguration">
            <summary>Shim type of MetroLog.LoggingConfiguration</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLoggingConfiguration.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLoggingConfiguration.#ctor(MetroLog.LoggingConfiguration)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLoggingConfiguration.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Fakes.ShimLoggingConfiguration.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.AddTargetLogLevelLogLevelTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(LogLevel min, LogLevel max, Target target)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.AddTargetLogLevelTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(LogLevel level, Target target)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.Constructor">
            <summary>Sets the shim of LoggingConfiguration.LoggingConfiguration()</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.GetTargetsLogLevel">
            <summary>Sets the shim of LoggingConfiguration.GetTargets(LogLevel level)</summary>
        </member>
        <member name="T:MetroLog.Fakes.ShimLoggingConfiguration.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.AllInstances.AddTargetLogLevelLogLevelTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(LogLevel min, LogLevel max, Target target)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.AllInstances.AddTargetLogLevelTarget">
            <summary>Sets the shim of LoggingConfiguration.AddTarget(LogLevel level, Target target)</summary>
        </member>
        <member name="P:MetroLog.Fakes.ShimLoggingConfiguration.AllInstances.GetTargetsLogLevel">
            <summary>Sets the shim of LoggingConfiguration.GetTargets(LogLevel level)</summary>
        </member>
        <member name="T:MetroLog.Fakes.StubILogManager">
            <summary>Stub type of MetroLog.ILogManager</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogManager.#ctor">
            <summary>Initializes a new instance of type StubILogManager</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogManager.DefaultConfigurationGet">
            <summary>Sets the stub of ILogManager.get_DefaultConfiguration()</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogManager.GetLoggerOf1LoggingConfiguration``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{MetroLog.LoggingConfiguration,MetroLog.ILogger})">
            <summary>Sets stubs of GetLogger(LoggingConfiguration config)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogManager.GetLoggerStringLoggingConfiguration">
            <summary>Sets the stub of ILogManager.GetLogger(String name, LoggingConfiguration config)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogManager.ml::MetroLog#ILogManager#GetLogger``1(MetroLog.LoggingConfiguration)">
            <summary>Sets the stub of ILogManager.GetLogger(LoggingConfiguration config)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogManager.ml::MetroLog#ILogManager#GetLogger(System.String,MetroLog.LoggingConfiguration)">
            <summary>Sets the stub of ILogManager.GetLogger(String name, LoggingConfiguration config)</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogManager.ml::MetroLog#ILogManager#DefaultConfiguration">
            <summary>Sets the stub of ILogManager.get_DefaultConfiguration()</summary>
        </member>
        <member name="T:MetroLog.Fakes.StubILogger">
            <summary>Stub type of MetroLog.ILogger</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.#ctor">
            <summary>Initializes a new instance of type StubILogger</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.DebugStringException">
            <summary>Sets the stub of ILogger.Debug(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.DebugStringObjectArray">
            <summary>Sets the stub of ILogger.Debug(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.ErrorStringException">
            <summary>Sets the stub of ILogger.Error(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.ErrorStringObjectArray">
            <summary>Sets the stub of ILogger.Error(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.FatalStringException">
            <summary>Sets the stub of ILogger.Fatal(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.FatalStringObjectArray">
            <summary>Sets the stub of ILogger.Fatal(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.InfoStringException">
            <summary>Sets the stub of ILogger.Info(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.InfoStringObjectArray">
            <summary>Sets the stub of ILogger.Info(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsDebugEnabledGet">
            <summary>Sets the stub of ILogger.get_IsDebugEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsEnabledLogLevel">
            <summary>Sets the stub of ILogger.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsErrorEnabledGet">
            <summary>Sets the stub of ILogger.get_IsErrorEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsFatalEnabledGet">
            <summary>Sets the stub of ILogger.get_IsFatalEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsInfoEnabledGet">
            <summary>Sets the stub of ILogger.get_IsInfoEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsTraceEnabledGet">
            <summary>Sets the stub of ILogger.get_IsTraceEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.IsWarnEnabledGet">
            <summary>Sets the stub of ILogger.get_IsWarnEnabled()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.LogLogLevelStringException">
            <summary>Sets the stub of ILogger.Log(LogLevel logLevel, String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.LogLogLevelStringObjectArray">
            <summary>Sets the stub of ILogger.Log(LogLevel logLevel, String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Debug(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Debug(String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Debug(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Debug(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Error(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Error(String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Error(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Error(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Fatal(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Fatal(String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Fatal(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Fatal(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Info(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Info(String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Info(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Info(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsEnabled(MetroLog.LogLevel)">
            <summary>Sets the stub of ILogger.IsEnabled(LogLevel level)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Log(MetroLog.LogLevel,System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Log(LogLevel logLevel, String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Log(MetroLog.LogLevel,System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Log(LogLevel logLevel, String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Trace(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Trace(String message, Object[] ps)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Trace(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Trace(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Warn(System.String,System.Exception)">
            <summary>Sets the stub of ILogger.Warn(String message, Exception ex)</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Warn(System.String,System.Object[])">
            <summary>Sets the stub of ILogger.Warn(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.NameGet">
            <summary>Sets the stub of ILogger.get_Name()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.TraceStringException">
            <summary>Sets the stub of ILogger.Trace(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.TraceStringObjectArray">
            <summary>Sets the stub of ILogger.Trace(String message, Object[] ps)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.WarnStringException">
            <summary>Sets the stub of ILogger.Warn(String message, Exception ex)</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubILogger.WarnStringObjectArray">
            <summary>Sets the stub of ILogger.Warn(String message, Object[] ps)</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsDebugEnabled">
            <summary>Sets the stub of ILogger.get_IsDebugEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsErrorEnabled">
            <summary>Sets the stub of ILogger.get_IsErrorEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsFatalEnabled">
            <summary>Sets the stub of ILogger.get_IsFatalEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsInfoEnabled">
            <summary>Sets the stub of ILogger.get_IsInfoEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsTraceEnabled">
            <summary>Sets the stub of ILogger.get_IsTraceEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#IsWarnEnabled">
            <summary>Sets the stub of ILogger.get_IsWarnEnabled()</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubILogger.ml::MetroLog#ILogger#Name">
            <summary>Sets the stub of ILogger.get_Name()</summary>
        </member>
        <member name="T:MetroLog.Fakes.StubLogManagerFactoryBase">
            <summary>Stub type of MetroLog.LogManagerFactoryBase</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubLogManagerFactoryBase.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubLogManagerFactoryBase.CreateDefaultSettings">
            <summary>Sets the stub of LogManagerFactoryBase.CreateDefaultSettings()</summary>
        </member>
        <member name="F:MetroLog.Fakes.StubLogManagerFactoryBase.CreateDefaultSettings01">
            <summary>Sets the stub of LogManagerFactoryBase.CreateDefaultSettings()</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubLogManagerFactoryBase.InitializeStub">
            <summary>Initializes a new instance of type StubLogManagerFactoryBase</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLogManagerFactoryBase.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLogManagerFactoryBase.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLogManagerFactoryBase.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Fakes.StubLoggingConfiguration">
            <summary>Stub type of MetroLog.LoggingConfiguration</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubLoggingConfiguration.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Fakes.StubLoggingConfiguration.InitializeStub">
            <summary>Initializes a new instance of type StubLoggingConfiguration</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLoggingConfiguration.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLoggingConfiguration.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Fakes.StubLoggingConfiguration.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout">
            <summary>Shim type of MetroLog.Layouts.FileSnapshotLayout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.#ctor(MetroLog.Layouts.FileSnapshotLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.Constructor">
            <summary>Sets the shim of FileSnapshotLayout.FileSnapshotLayout()</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.GetFormattedStringLogEventInfo">
            <summary>Sets the shim of FileSnapshotLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimFileSnapshotLayout.AllInstances.GetFormattedStringLogEventInfo">
            <summary>Sets the shim of FileSnapshotLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimLayout">
            <summary>Shim type of MetroLog.Layouts.Layout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimLayout.#ctor(MetroLog.Layouts.Layout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimLayout.Constructor">
            <summary>Sets the shim of Layout.Layout()</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimSingleLineLayout">
            <summary>Shim type of MetroLog.Layouts.SingleLineLayout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimSingleLineLayout.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimSingleLineLayout.#ctor(MetroLog.Layouts.SingleLineLayout)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimSingleLineLayout.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.ShimSingleLineLayout.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimSingleLineLayout.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimSingleLineLayout.Constructor">
            <summary>Sets the shim of SingleLineLayout.SingleLineLayout()</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimSingleLineLayout.GetFormattedStringLogEventInfo">
            <summary>Sets the shim of SingleLineLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.ShimSingleLineLayout.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.ShimSingleLineLayout.AllInstances.GetFormattedStringLogEventInfo">
            <summary>Sets the shim of SingleLineLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.StubFileSnapshotLayout">
            <summary>Stub type of MetroLog.Layouts.FileSnapshotLayout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.GetFormattedString(MetroLog.LogEventInfo)">
            <summary>Sets the stub of FileSnapshotLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="F:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.GetFormattedStringLogEventInfo">
            <summary>Sets the stub of FileSnapshotLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.InitializeStub">
            <summary>Initializes a new instance of type StubFileSnapshotLayout</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubFileSnapshotLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.StubLayout">
            <summary>Stub type of MetroLog.Layouts.Layout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubLayout.GetFormattedString(MetroLog.LogEventInfo)">
            <summary>Sets the stub of Layout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="F:MetroLog.Layouts.Fakes.StubLayout.GetFormattedStringLogEventInfo">
            <summary>Sets the stub of Layout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubLayout.InitializeStub">
            <summary>Initializes a new instance of type StubLayout</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Layouts.Fakes.StubSingleLineLayout">
            <summary>Stub type of MetroLog.Layouts.SingleLineLayout</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubSingleLineLayout.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubSingleLineLayout.GetFormattedString(MetroLog.LogEventInfo)">
            <summary>Sets the stub of SingleLineLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="F:MetroLog.Layouts.Fakes.StubSingleLineLayout.GetFormattedStringLogEventInfo">
            <summary>Sets the stub of SingleLineLayout.GetFormattedString(LogEventInfo info)</summary>
        </member>
        <member name="M:MetroLog.Layouts.Fakes.StubSingleLineLayout.InitializeStub">
            <summary>Initializes a new instance of type StubSingleLineLayout</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubSingleLineLayout.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubSingleLineLayout.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Layouts.Fakes.StubSingleLineLayout.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimAsyncTarget">
            <summary>Shim type of MetroLog.Targets.AsyncTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimAsyncTarget.#ctor(MetroLog.Targets.AsyncTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimAsyncTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimAsyncTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimAsyncTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimAsyncTarget.ConstructorLayout">
            <summary>Sets the shim of AsyncTarget.AsyncTarget(Layout layout)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimAsyncTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimDebugTarget">
            <summary>Shim type of MetroLog.Targets.DebugTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimDebugTarget.#ctor">
            <summary>Initializes a new shim instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimDebugTarget.#ctor(MetroLog.Targets.DebugTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimDebugTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimDebugTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimDebugTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimDebugTarget.Constructor">
            <summary>Sets the shim of DebugTarget.DebugTarget()</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimDebugTarget.ConstructorLayout">
            <summary>Sets the shim of DebugTarget.DebugTarget(Layout layout)</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimDebugTarget.WriteLogEventInfo">
            <summary>Sets the shim of DebugTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimDebugTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimDebugTarget.AllInstances.WriteLogEventInfo">
            <summary>Sets the shim of DebugTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimSyncTarget">
            <summary>Shim type of MetroLog.Targets.SyncTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimSyncTarget.#ctor(MetroLog.Targets.SyncTarget)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimSyncTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimSyncTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimSyncTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimSyncTarget.ConstructorLayout">
            <summary>Sets the shim of SyncTarget.SyncTarget(Layout layout)</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimSyncTarget.WriteAsyncLogEventInfo">
            <summary>Sets the shim of SyncTarget.WriteAsync(LogEventInfo entry)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimSyncTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimSyncTarget.AllInstances.WriteAsyncLogEventInfo">
            <summary>Sets the shim of SyncTarget.WriteAsync(LogEventInfo entry)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimTarget">
            <summary>Shim type of MetroLog.Targets.Target</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimTarget.#ctor(MetroLog.Targets.Target)">
            <summary>Initializes a new shim for the given instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimTarget.BehaveAsCurrent">
            <summary>Assigns the &apos;Current&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.ShimTarget.BehaveAsNotImplemented">
            <summary>Assigns the &apos;NotImplemented&apos; behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.Behavior">
            <summary>Assigns the behavior for all methods of the shimmed type</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.ConstructorLayout">
            <summary>Sets the shim of Target.Target(Layout layout)</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.LayoutGet">
            <summary>Sets the shim of Target.get_Layout()</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.LayoutSetLayout">
            <summary>Sets the shim of Target.set_Layout(Layout value)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.ShimTarget.AllInstances">
            <summary>Define shims for all instances members</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.AllInstances.LayoutGet">
            <summary>Sets the shim of Target.get_Layout()</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.ShimTarget.AllInstances.LayoutSetLayout">
            <summary>Sets the shim of Target.set_Layout(Layout value)</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.StubDebugTarget">
            <summary>Stub type of MetroLog.Targets.DebugTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubDebugTarget.#ctor">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubDebugTarget.#ctor(MetroLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubDebugTarget.InitializeStub">
            <summary>Initializes a new instance of type StubDebugTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubDebugTarget.Write(MetroLog.LogEventInfo)">
            <summary>Sets the stub of DebugTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="F:MetroLog.Targets.Fakes.StubDebugTarget.WriteLogEventInfo">
            <summary>Sets the stub of DebugTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubDebugTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubDebugTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubDebugTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
        <member name="T:MetroLog.Targets.Fakes.StubSyncTarget">
            <summary>Stub type of MetroLog.Targets.SyncTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubSyncTarget.#ctor(MetroLog.Layouts.Layout)">
            <summary>Initializes a new instance</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubSyncTarget.InitializeStub">
            <summary>Initializes a new instance of type StubSyncTarget</summary>
        </member>
        <member name="M:MetroLog.Targets.Fakes.StubSyncTarget.Write(MetroLog.LogEventInfo)">
            <summary>Sets the stub of SyncTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="F:MetroLog.Targets.Fakes.StubSyncTarget.WriteLogEventInfo">
            <summary>Sets the stub of SyncTarget.Write(LogEventInfo entry)</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubSyncTarget.CallBase">
            <summary>Gets or sets a value that indicates if the base method should be called instead of the fallback behavior</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubSyncTarget.InstanceBehavior">
            <summary>Gets or sets the instance behavior.</summary>
        </member>
        <member name="P:MetroLog.Targets.Fakes.StubSyncTarget.InstanceObserver">
            <summary>Gets or sets the instance observer.</summary>
        </member>
    </members>
</doc>
